/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package in.ispirt.pushpaka.registry.api;

import in.ispirt.pushpaka.registry.dao.Dao;
import in.ispirt.pushpaka.registry.dao.DaoInstance;
import in.ispirt.pushpaka.registry.models.DigitalSkyServiceProvider;
import in.ispirt.pushpaka.registry.utils.DaoException;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

@Generated(
  value = "org.openapitools.codegen.languages.SpringCodegen",
  date = "2023-09-07T22:13:29.143496+05:30[Asia/Kolkata]"
)
@Validated
@Tag(name = "digitalSkyServiceProviders", description = "DigitalSkyServiceProviders")
public interface DigitalSkyServiceProviderApi {
  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /digitalSkyServiceProvider : Add a new digitalSkyServiceProvider to the store
   * Add a new digitalSkyServiceProvider to the store
   *
   * @param digitalSkyServiceProvider Create a new digitalSkyServiceProvider in the store (required)
   * @return Successful operation (status code 200)
   *         or Invalid input (status code 405)
   */
  @Operation(
    operationId = "addDigitalSkyServiceProvider",
    summary = "Add a new digitalSkyServiceProvider to the store",
    description = "Add a new digitalSkyServiceProvider to the store",
    tags = { "digitalSkyServiceProvider" },
    responses = {
      @ApiResponse(
        responseCode = "200",
        description = "Successful operation",
        content = {
          @Content(
            mediaType = "application/json",
            schema = @Schema(implementation = DigitalSkyServiceProvider.class)
          )
        }
      ),
      @ApiResponse(responseCode = "405", description = "Invalid input")
    },
    security = { @SecurityRequirement(name = "jwt") }
  )
  @RequestMapping(
    method = RequestMethod.POST,
    value = "/digitalSkyServiceProvider",
    produces = { "application/json" },
    consumes = { "application/json" }
  )
  default ResponseEntity<DigitalSkyServiceProvider> addDigitalSkyServiceProvider(
    @Parameter(
      name = "DigitalSkyServiceProvider",
      description = "Create a new digitalSkyServiceProvider in the store",
      required = true
    ) @Valid @RequestBody DigitalSkyServiceProvider digitalSkyServiceProvider
  ) {
    try {
      System.out.println(
        "Create DigitalSkyServiceProvider " + digitalSkyServiceProvider.toString()
      );
      Dao.DigitalSkyServiceProvider mm = Dao.DigitalSkyServiceProvider.create(
        DaoInstance.getInstance().getSession(),
        DigitalSkyServiceProvider.fromOa(digitalSkyServiceProvider)
      );
      return ResponseEntity.ok(DigitalSkyServiceProvider.toOa(mm));
    } catch (DaoException e) {
      System.err.println("Exception: " + e.toString());
      e.printStackTrace(System.err);
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    } catch (Exception e) {
      System.err.println("Exception: " + e.toString());
      e.printStackTrace(System.err);
      return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  /**
   * DELETE /digitalSkyServiceProvider/{digitalSkyServiceProviderId} : Deletes a digitalSkyServiceProvider
   *
   *
   * @param digitalSkyServiceProviderId DigitalSkyServiceProvider id to delete (required)
   * @return Invalid digitalSkyServiceProvider value (status code 400)
   */
  @Operation(
    operationId = "deleteDigitalSkyServiceProvider",
    summary = "Deletes a digitalSkyServiceProvider",
    description = "",
    tags = { "digitalSkyServiceProvider" },
    responses = {
      @ApiResponse(
        responseCode = "400",
        description = "Invalid digitalSkyServiceProvider value"
      )
    },
    security = { @SecurityRequirement(name = "jwt") }
  )
  @RequestMapping(
    method = RequestMethod.DELETE,
    value = "/digitalSkyServiceProvider/{digitalSkyServiceProviderId}"
  )
  default ResponseEntity<Void> deleteDigitalSkyServiceProvider(
    @Parameter(
      name = "digitalSkyServiceProviderId",
      description = "DigitalSkyServiceProvider id to delete",
      required = true,
      in = ParameterIn.PATH
    ) @PathVariable("digitalSkyServiceProviderId") UUID digitalSkyServiceProviderId
  ) {
    Dao.DigitalSkyServiceProvider.delete(
      DaoInstance.getInstance().getSession(),
      digitalSkyServiceProviderId
    );
    return ResponseEntity.ok().build();
    // return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /digitalSkyServiceProvider/find : Finds DigitalSkyServiceProviders
   *
   * @return successful operation (status code 200)
   *         or Invalid value (status code 400)
   */
  @Operation(
    operationId = "findDigitalSkyServiceProviders",
    summary = "Finds DigitalSkyServiceProviders",
    tags = { "digitalSkyServiceProvider" },
    responses = {
      @ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = {
          @Content(
            mediaType = "application/json",
            array = @ArraySchema(
              schema = @Schema(implementation = DigitalSkyServiceProvider.class)
            )
          )
        }
      ),
      @ApiResponse(responseCode = "400", description = "Invalid value")
    },
    security = { @SecurityRequirement(name = "jwt") }
  )
  @RequestMapping(
    method = RequestMethod.GET,
    value = "/digitalSkyServiceProvider/find",
    produces = { "application/json" }
  )
  default ResponseEntity<List<DigitalSkyServiceProvider>> findDigitalSkyServiceProviders() {
    // getRequest()
    //   .ifPresent(
    //     request -> {
    //       for (MediaType mediaType : MediaType.parseMediaTypes(
    //         request.getHeader("Accept")
    //       )) {
    //         if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
    //           String exampleString =
    //             "[ { \"oemSerialNumber\" : \"oemSerialNumber\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : { \"photoUrl\" : \"https://openapi-generator.tech\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"modelNumber\" : \"modelNumber\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"mtow\" : 6.0274563, \"digitalSkyServiceProvider\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"validity\" : { \"till\" : \"2000-01-23T04:56:07.000+00:00\", \"from\" : \"2000-01-23T04:56:07.000+00:00\" }, \"digitalSkyServiceProvider\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"cin\" : \"cin\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"regdAddress\" : { \"city\" : \"Mumbai\", \"pinCode\" : 172074.45705867198, \"line3\" : \"Bandra West\", \"line2\" : \"Landmark\", \"line1\" : \"123 ABC Housing Society\" }, \"gstin\" : \"gstin\" } }, \"supportedOperationCategories\" : [ null, null ] } }, { \"oemSerialNumber\" : \"oemSerialNumber\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : { \"photoUrl\" : \"https://openapi-generator.tech\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"modelNumber\" : \"modelNumber\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"mtow\" : 6.0274563, \"digitalSkyServiceProvider\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"validity\" : { \"till\" : \"2000-01-23T04:56:07.000+00:00\", \"from\" : \"2000-01-23T04:56:07.000+00:00\" }, \"digitalSkyServiceProvider\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"cin\" : \"cin\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"regdAddress\" : { \"city\" : \"Mumbai\", \"pinCode\" : 172074.45705867198, \"line3\" : \"Bandra West\", \"line2\" : \"Landmark\", \"line1\" : \"123 ABC Housing Society\" }, \"gstin\" : \"gstin\" } }, \"supportedOperationCategories\" : [ null, null ] } } ]";
    //           ApiUtil.setExampleResponse(request, "application/json", exampleString);
    //           break;
    //         }
    //       }
    //     }
    //   );
    List<Dao.DigitalSkyServiceProvider> les = Dao.DigitalSkyServiceProvider.getAll(
      DaoInstance.getInstance().getSession()
    );
    List<DigitalSkyServiceProvider> leso = les
      .stream()
      .map(x -> in.ispirt.pushpaka.registry.models.DigitalSkyServiceProvider.toOa(x))
      .collect(Collectors.toList());
    return ResponseEntity.ok(leso);
  }

  /**
   * GET /digitalSkyServiceProvider/{digitalSkyServiceProviderId} : Find digitalSkyServiceProvider by ID
   * Returns a single digitalSkyServiceProvider
   *
   * @param digitalSkyServiceProviderId ID of digitalSkyServiceProvider to return (required)
   * @return successful operation (status code 200)
   *         or Invalid ID supplied (status code 400)
   *         or DigitalSkyServiceProvider not found (status code 404)
   */
  @Operation(
    operationId = "getDigitalSkyServiceProviderById",
    summary = "Find digitalSkyServiceProvider by ID",
    description = "Returns a single digitalSkyServiceProvider",
    tags = { "digitalSkyServiceProvider" },
    responses = {
      @ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = {
          @Content(
            mediaType = "application/json",
            schema = @Schema(implementation = DigitalSkyServiceProvider.class)
          )
        }
      ),
      @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
      @ApiResponse(
        responseCode = "404",
        description = "DigitalSkyServiceProvider not found"
      )
    },
    security = { @SecurityRequirement(name = "jwt") }
  )
  @RequestMapping(
    method = RequestMethod.GET,
    value = "/digitalSkyServiceProvider/{digitalSkyServiceProviderId}",
    produces = { "application/json" }
  )
  default ResponseEntity<DigitalSkyServiceProvider> getDigitalSkyServiceProviderById(
    @Parameter(
      name = "digitalSkyServiceProviderId",
      description = "ID of digitalSkyServiceProvider to return",
      required = true,
      in = ParameterIn.PATH
    ) @PathVariable("digitalSkyServiceProviderId") UUID digitalSkyServiceProviderId
  ) {
    // getRequest()
    //   .ifPresent(
    //     request -> {
    //       for (MediaType mediaType : MediaType.parseMediaTypes(
    //         request.getHeader("Accept")
    //       )) {
    //         if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
    //           String exampleString =
    //             "{ \"oemSerialNumber\" : \"oemSerialNumber\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : { \"photoUrl\" : \"https://openapi-generator.tech\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"modelNumber\" : \"modelNumber\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"mtow\" : 6.0274563, \"digitalSkyServiceProvider\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"validity\" : { \"till\" : \"2000-01-23T04:56:07.000+00:00\", \"from\" : \"2000-01-23T04:56:07.000+00:00\" }, \"digitalSkyServiceProvider\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"cin\" : \"cin\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"regdAddress\" : { \"city\" : \"Mumbai\", \"pinCode\" : 172074.45705867198, \"line3\" : \"Bandra West\", \"line2\" : \"Landmark\", \"line1\" : \"123 ABC Housing Society\" }, \"gstin\" : \"gstin\" } }, \"supportedOperationCategories\" : [ null, null ] } }";
    //           ApiUtil.setExampleResponse(request, "application/json", exampleString);
    //           break;
    //         }
    //       }
    //     }
    //   );
    Dao.DigitalSkyServiceProvider le = Dao.DigitalSkyServiceProvider.get(
      DaoInstance.getInstance().getSession(),
      digitalSkyServiceProviderId
    );
    return ResponseEntity.ok(
      in.ispirt.pushpaka.registry.models.DigitalSkyServiceProvider.toOa(le)
    );
  }

  /**
   * PUT /digitalSkyServiceProvider/{digitalSkyServiceProviderId} : Updates a digitalSkyServiceProvider in the store with form data
   *
   *
   * @param digitalSkyServiceProviderId ID of digitalSkyServiceProvider that needs to be updated (required)
   * @param name Name of digitalSkyServiceProvider that needs to be updated (optional)
   * @param status Status of digitalSkyServiceProvider that needs to be updated (optional)
   * @return Invalid input (status code 405)
   */
  @Operation(
    operationId = "updateDigitalSkyServiceProvider",
    summary = "Updates a digitalSkyServiceProvider in the store",
    description = "",
    tags = { "digitalSkyServiceProvider" },
    responses = { @ApiResponse(responseCode = "405", description = "Invalid input") },
    security = { @SecurityRequirement(name = "jwt") }
  )
  @RequestMapping(
    method = RequestMethod.PUT,
    value = "/digitalSkyServiceProvider/{digitalSkyServiceProviderId}"
  )
  default ResponseEntity<DigitalSkyServiceProvider> updateDigitalSkyServiceProvider(
    @Parameter(
      name = "digitalSkyServiceProviderId",
      description = "ID of digitalSkyServiceProvider that needs to be updated",
      required = true,
      in = ParameterIn.PATH
    ) @PathVariable("digitalSkyServiceProviderId") UUID digitalSkyServiceProviderId,
    @Parameter(
      name = "DigitalSkyServiceProvider",
      description = "Create a new digitalSkyServiceProvider in the store",
      required = true
    ) @Valid @RequestBody DigitalSkyServiceProvider digitalSkyServiceProvider
  ) {
    Dao.DigitalSkyServiceProvider le = Dao.DigitalSkyServiceProvider.update(
      DaoInstance.getInstance().getSession(),
      digitalSkyServiceProviderId,
      DigitalSkyServiceProvider.fromOa(digitalSkyServiceProvider)
    );
    return ResponseEntity.ok(
      in.ispirt.pushpaka.registry.models.DigitalSkyServiceProvider.toOa(le)
    );
    // return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
