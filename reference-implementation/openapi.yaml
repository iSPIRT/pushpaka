openapi: 3.0.2
info:
  title: Pushpaka Registry
  description: "This is a sample UasType Store Server based on the OpenAPI 3.0 specification.\
    \  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io).\
    \ In the third iteration of the uasType store, we've switched to the design first\
    \ approach!\nYou can now help us improve the API whether it's by making changes\
    \ to the definition itself or to the code.\nThat way, with time, we can improve\
    \ the API in general, and expose some of the new features in OAS3.\n\nSome useful\
    \ links:\n- [The UasType Store repository](https://github.com/swagger-api/swagger-petstore)\n\
    - [The source API definition for the UasType Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)"
  termsOfService: http://swagger.io/terms/
  contact:
    email: sayandeep@ispirt.in
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.17
externalDocs:
  description: Find out more about Pushpaka
  url: https://ispirt.github.io/pushpaka/
servers:
- url: /api/v1
tags:
- name: uas_types
  description: UAS Types
- name: uas
  description: UAS
- name: user
  description: Operations about user
paths:
  /uasType:
    put:
      tags:
      - uas_types
      summary: Update an existing uasType
      description: Update an existing uasType by Id
      operationId: updateUasType
      requestBody:
        description: Update an existent uasType in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UasType'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UasType'
        "400":
          description: Invalid ID supplied
        "404":
          description: UasType not found
        "405":
          description: Validation exception
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
    post:
      tags:
      - uas_types
      summary: Add a new uasType to the store
      description: Add a new uasType to the store
      operationId: addUasType
      requestBody:
        description: Create a new uasType in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UasType'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UasType'
        "405":
          description: Invalid input
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
  /uasType/findByStatus:
    get:
      tags:
      - uas_types
      summary: Finds UasTypes by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findUasTypesByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        explode: true
        schema:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UasType'
        "400":
          description: Invalid status value
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
  /uasType/find:
    get:
      tags:
      - uas_types
      summary: Finds UasTypes
      operationId: findUasTypes
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UasType'
        "400":
          description: Invalid value
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
  /uasType/{uasTypeId}:
    get:
      tags:
      - uas_types
      summary: Find uasType by ID
      description: Returns a single uasType
      operationId: getUasTypeById
      parameters:
      - name: uasTypeId
        in: path
        description: ID of uasType to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UasType'
        "400":
          description: Invalid ID supplied
        "404":
          description: UasType not found
      security:
      - api_key: []
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
    post:
      tags:
      - uas_types
      summary: Updates a uasType in the store with form data
      description: ""
      operationId: updateUasTypeWithForm
      parameters:
      - name: uasTypeId
        in: path
        description: ID of uasType that needs to be updated
        required: true
        schema:
          type: string
          format: uuid
      - name: name
        in: query
        description: Name of uasType that needs to be updated
        schema:
          type: string
      - name: status
        in: query
        description: Status of uasType that needs to be updated
        schema:
          type: string
      responses:
        "405":
          description: Invalid input
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
    delete:
      tags:
      - uas_types
      summary: Deletes a uasType
      description: ""
      operationId: deleteUasType
      parameters:
      - name: api_key
        in: header
        description: ""
        required: false
        schema:
          type: string
      - name: uasTypeId
        in: path
        description: UasType id to delete
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Invalid uasType value
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
  /uasType/{uasTypeId}/uploadImage:
    post:
      tags:
      - uas_types
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
      - name: uasTypeId
        in: path
        description: ID of uasType to update
        required: true
        schema:
          type: string
          format: uuid
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
  /uas:
    put:
      tags:
      - uas
      summary: Update an existing uas
      description: Update an existing uas by Id
      operationId: updateUas
      requestBody:
        description: Update an existent uas in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Uas'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uas'
        "400":
          description: Invalid ID supplied
        "404":
          description: Uas not found
        "405":
          description: Validation exception
      security:
      - registry_auth:
        - write:uass
        - read:uass
    post:
      tags:
      - uas
      summary: Add a new uas to the store
      description: Add a new uas to the store
      operationId: addUas
      requestBody:
        description: Create a new uas in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Uas'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uas'
        "405":
          description: Invalid input
      security:
      - registry_auth:
        - write:uass
        - read:uass
  /uas/findByStatus:
    get:
      tags:
      - uas
      summary: Finds Uass by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findUassByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        explode: true
        schema:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Uas'
        "400":
          description: Invalid status value
      security:
      - registry_auth:
        - write:uass
        - read:uass
  /uas/find:
    get:
      tags:
      - uas
      summary: Finds Uass
      operationId: findUass
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Uas'
        "400":
          description: Invalid value
      security:
      - registry_auth:
        - write:uass
        - read:uass
  /uas/{uasId}:
    get:
      tags:
      - uas
      summary: Find uas by ID
      description: Returns a single uas
      operationId: getUasById
      parameters:
      - name: uasId
        in: path
        description: ID of uas to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Uas'
        "400":
          description: Invalid ID supplied
        "404":
          description: Uas not found
      security:
      - api_key: []
      - registry_auth:
        - write:uass
        - read:uass
    post:
      tags:
      - uas
      summary: Updates a uas in the store with form data
      description: ""
      operationId: updateUasWithForm
      parameters:
      - name: uasId
        in: path
        description: ID of uas that needs to be updated
        required: true
        schema:
          type: string
          format: uuid
      - name: name
        in: query
        description: Name of uas that needs to be updated
        schema:
          type: string
      - name: status
        in: query
        description: Status of uas that needs to be updated
        schema:
          type: string
      responses:
        "405":
          description: Invalid input
      security:
      - registry_auth:
        - write:uass
        - read:uass
    delete:
      tags:
      - uas
      summary: Deletes a uas
      description: ""
      operationId: deleteUas
      parameters:
      - name: api_key
        in: header
        description: ""
        required: false
        schema:
          type: string
      - name: uasId
        in: path
        description: Uas id to delete
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "400":
          description: Invalid uas value
      security:
      - registry_auth:
        - write:uass
        - read:uass
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: false
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        schema:
          type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "e66b7c9e-79f5-44b0-9642-59ca20b7af63"
          readOnly: true
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: "+919999999999"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
      required:
        - id
        - username
        - email
        - firstName
        - lastName
        - timestamps
    UasType:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        modelNumber:
          type: string
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
        propulsionCategory:
          $ref: '#/components/schemas/UasPropulsionCategory'
        weightCategory:
          $ref: '#/components/schemas/UasWeightCategory'
        mtow:
          type: number
          format: float
          description: maximum take off weight in kilograms
        photoUrl:
          type: string
          format: uri
          maxLength: 512
        supportedOperationCategories:
          type: array
          items:
            $ref: '#/components/schemas/OperationCategory'
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
      required:
        - id
        - manufacturer
        - modelNumber
        - propulsionCategory
        - weightCategory
        - mtow
        - supportedOperationCategories
        - timestamps
    UasStatus:
      type: string
      enum:
        - ACTIVE
        - GROUNDED
    Uas:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        'type':
          $ref: '#/components/schemas/UasType'
        oemSerialNumber:
          type: string
          maxLength: 12
          minLength: 6
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
        status:
          $ref: '#/components/schemas/UasStatus'
      required:
      - id
      - 'type'
      - oemSerialNumber
      - timestamps
      - status
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    OperationCategory:
      type: string
      enum:
        - C1
        - C2
        - C3
    PilotStatus:
      type: string
      enum:
        - ACTIVE
        - REVOKED
    UasWeightCategory:
      type: string
      enum:
        - NANO
        - SMALL
        - MICRO
        - MEDIUM
        - LARGE
    UasPropulsionCategory:
      type: string
      enum:
        - VTOL
        - FIXED_WING
        - HYBRID
    State:
      type: string
      enum:
        - ANDHRA_PRADESH
        - ARUNACHAL_PRADESH
        - ASSAM
        - BIHAR
        - CHHATTISGARH
        - GOA
        - GUJARAT
        - HARYANA
        - HIMACHAL_PRADESH
        - JHARKHAND
        - KARNATAKA
        - KERALA
        - MADHYA_PRADESH
        - MAHARASHTRA
        - MANIPUR
        - MEGHALAYA
        - MIZORAM
        - NAGALAND
        - ODISHA
        - PUNJAB
        - RAJASTHAN
        - SIKKIM
        - TAMIL_NADU
        - TELANGANA
        - TRIPURA
        - UTTARAKHAND
        - UTTAR_PRADESH
        - WEST_BENGAL
        - ANDAMAN_NICOBAR_ISLANDS
        - CHANDIGARH
        - DADRA_NAGAR_HAVELI_DAMAN_DIU
        - NCT
        - JAMMU_KASHMIR
        - LADAKH
        - LAKSHADWEEP
        - PUDUCHERRY
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 ABC Housing Society
        line2:
          type: string
          example: Landmark
        line3:
          type: string
          example: Bandra West
        city:
          type: string
          example: Mumbai
        state:
          $ref: '#/components/schemas/State'
        pinCode:
          type: number
          minimum: 100000
          maximum: 999999
      required:
        - line1
        - line2
        - line3
        - city
        - state
        - pinCode
    LegalEntity:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        cin:
          type: string
        name:
          type: string
        regdAddress:
          $ref: '#/components/schemas/Address'
        gstin:
          type: string
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
      required:
        - id
        - name
        - regdAddress
        - cin
        - timestamps
        - validity
    Manufacturer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        legalEntity:
          $ref: '#/components/schemas/LegalEntity'
        validity:
          $ref: '#/components/schemas/Validity'
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
      required:
        - id
        - legalEntity
        - validity
        - timestamps
    CivilAviationAuthority:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        legalEntity:
          $ref: '#/components/schemas/LegalEntity'
        validity:
          $ref: '#/components/schemas/Validity'
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
      required:
        - id
        - legalEntity
        - validity
        - timestamps
    Validity:
      type: object
      properties:
        from:
          type: string
          format: date-time
        till:
          type: string
          format: date-time
      required:
        - from
    ObjectTimestamps:
      type: object
      properties:
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
      required:
        - created
        - updated
    Operator:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        legalEntity:
          $ref: '#/components/schemas/LegalEntity'
        validity:
          $ref: '#/components/schemas/Validity'
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
      required:
        - id
        - legalEntity
        - timestamps
        - validity
    Pilot:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        timestamps:
          $ref: '#/components/schemas/ObjectTimestamps'
        validity:
          $ref: '#/components/schemas/Validity'
      required:
        - id
        - user
        - timestamps
        - validity
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    registry_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:uasTypes: modify uasTypes in your account
            read:uasTypes: read your uasTypes
            write:uass: modify uass in your account
            read:uass: read your uass
    api_key:
      type: apiKey
      name: api_key
      in: header
