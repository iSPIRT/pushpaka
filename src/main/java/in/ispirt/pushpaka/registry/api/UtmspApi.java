/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package in.ispirt.pushpaka.registry.api;

import in.ispirt.pushpaka.registry.dao.Dao;
import in.ispirt.pushpaka.registry.dao.DaoInstance;
import in.ispirt.pushpaka.registry.models.Utmsp;
import in.ispirt.pushpaka.registry.utils.DaoException;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;
import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

@Generated(
  value = "org.openapitools.codegen.languages.SpringCodegen",
  date = "2023-09-07T22:13:29.143496+05:30[Asia/Kolkata]"
)
@Validated
@Tag(name = "utmsps", description = "Utmsps")
public interface UtmspApi {
  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /utmsp : Add a new utmsp to the store
   * Add a new utmsp to the store
   *
   * @param utmsp Create a new utmsp in the store (required)
   * @return Successful operation (status code 200)
   *         or Invalid input (status code 405)
   */
  @Operation(
    operationId = "addUtmsp",
    summary = "Add a new utmsp to the store",
    description = "Add a new utmsp to the store",
    tags = { "utmsp" },
    responses = {
      @ApiResponse(
        responseCode = "200",
        description = "Successful operation",
        content = {
          @Content(
            mediaType = "application/json",
            schema = @Schema(implementation = Utmsp.class)
          )
        }
      ),
      @ApiResponse(responseCode = "405", description = "Invalid input")
    },
    security = {
      @SecurityRequirement(
        name = "registry_auth",
        scopes = { "write:utmsps", "read:utmsps" }
      )
    }
  )
  @RequestMapping(
    method = RequestMethod.POST,
    value = "/utmsp",
    produces = { "application/json" },
    consumes = { "application/json" }
  )
  default ResponseEntity<Utmsp> addUtmsp(
    @Parameter(
      name = "Utmsp",
      description = "Create a new utmsp in the store",
      required = true
    ) @Valid @RequestBody Utmsp utmsp
  ) {
    try {
      System.out.println("Create Utmsp " + utmsp.toString());
      Dao.Utmsp mm = Dao.Utmsp.create(
        DaoInstance.getInstance().getSession(),
        Utmsp.fromOa(utmsp)
      );
      return ResponseEntity.ok(Utmsp.toOa(mm));
    } catch (DaoException e) {
      System.err.println("Exception: " + e.toString());
      e.printStackTrace(System.err);
      return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
    } catch (Exception e) {
      System.err.println("Exception: " + e.toString());
      e.printStackTrace(System.err);
      return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  /**
   * DELETE /utmsp/{utmspId} : Deletes a utmsp
   *
   *
   * @param utmspId Utmsp id to delete (required)
   * @return Invalid utmsp value (status code 400)
   */
  @Operation(
    operationId = "deleteUtmsp",
    summary = "Deletes a utmsp",
    description = "",
    tags = { "utmsp" },
    responses = {
      @ApiResponse(responseCode = "400", description = "Invalid utmsp value")
    },
    security = {
      @SecurityRequirement(
        name = "registry_auth",
        scopes = { "write:utmsps", "read:utmsps" }
      )
    }
  )
  @RequestMapping(method = RequestMethod.DELETE, value = "/utmsp/{utmspId}")
  default ResponseEntity<Void> deleteUtmsp(
    @Parameter(
      name = "utmspId",
      description = "Utmsp id to delete",
      required = true,
      in = ParameterIn.PATH
    ) @PathVariable("utmspId") UUID utmspId
  ) {
    Dao.Utmsp.delete(DaoInstance.getInstance().getSession(), utmspId);
    return ResponseEntity.ok().build();
    // return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /utmsp/find : Finds Utmsps
   *
   * @return successful operation (status code 200)
   *         or Invalid value (status code 400)
   */
  @Operation(
    operationId = "findUtmsps",
    summary = "Finds Utmsps",
    tags = { "utmsp" },
    responses = {
      @ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = {
          @Content(
            mediaType = "application/json",
            array = @ArraySchema(schema = @Schema(implementation = Utmsp.class))
          )
        }
      ),
      @ApiResponse(responseCode = "400", description = "Invalid value")
    },
    security = {
      @SecurityRequirement(
        name = "registry_auth",
        scopes = { "write:utmsps", "read:utmsps" }
      )
    }
  )
  @RequestMapping(
    method = RequestMethod.GET,
    value = "/utmsp/find",
    produces = { "application/json" }
  )
  default ResponseEntity<List<Utmsp>> findUtmsps() {
    // getRequest()
    //   .ifPresent(
    //     request -> {
    //       for (MediaType mediaType : MediaType.parseMediaTypes(
    //         request.getHeader("Accept")
    //       )) {
    //         if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
    //           String exampleString =
    //             "[ { \"oemSerialNumber\" : \"oemSerialNumber\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : { \"photoUrl\" : \"https://openapi-generator.tech\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"modelNumber\" : \"modelNumber\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"mtow\" : 6.0274563, \"utmsp\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"validity\" : { \"till\" : \"2000-01-23T04:56:07.000+00:00\", \"from\" : \"2000-01-23T04:56:07.000+00:00\" }, \"utmsp\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"cin\" : \"cin\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"regdAddress\" : { \"city\" : \"Mumbai\", \"pinCode\" : 172074.45705867198, \"line3\" : \"Bandra West\", \"line2\" : \"Landmark\", \"line1\" : \"123 ABC Housing Society\" }, \"gstin\" : \"gstin\" } }, \"supportedOperationCategories\" : [ null, null ] } }, { \"oemSerialNumber\" : \"oemSerialNumber\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : { \"photoUrl\" : \"https://openapi-generator.tech\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"modelNumber\" : \"modelNumber\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"mtow\" : 6.0274563, \"utmsp\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"validity\" : { \"till\" : \"2000-01-23T04:56:07.000+00:00\", \"from\" : \"2000-01-23T04:56:07.000+00:00\" }, \"utmsp\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"cin\" : \"cin\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"regdAddress\" : { \"city\" : \"Mumbai\", \"pinCode\" : 172074.45705867198, \"line3\" : \"Bandra West\", \"line2\" : \"Landmark\", \"line1\" : \"123 ABC Housing Society\" }, \"gstin\" : \"gstin\" } }, \"supportedOperationCategories\" : [ null, null ] } } ]";
    //           ApiUtil.setExampleResponse(request, "application/json", exampleString);
    //           break;
    //         }
    //       }
    //     }
    //   );
    List<Dao.Utmsp> les = Dao.Utmsp.getAll(
      DaoInstance.getInstance().getSession()
    );
    List<Utmsp> leso = les
      .stream()
      .map(x -> in.ispirt.pushpaka.registry.models.Utmsp.toOa(x))
      .collect(Collectors.toList());
    return ResponseEntity.ok(leso);
  }

  /**
   * GET /utmsp/{utmspId} : Find utmsp by ID
   * Returns a single utmsp
   *
   * @param utmspId ID of utmsp to return (required)
   * @return successful operation (status code 200)
   *         or Invalid ID supplied (status code 400)
   *         or Utmsp not found (status code 404)
   */
  @Operation(
    operationId = "getUtmspById",
    summary = "Find utmsp by ID",
    description = "Returns a single utmsp",
    tags = { "utmsp" },
    responses = {
      @ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = {
          @Content(
            mediaType = "application/json",
            schema = @Schema(implementation = Utmsp.class)
          )
        }
      ),
      @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
      @ApiResponse(responseCode = "404", description = "Utmsp not found")
    },
    security = {
      @SecurityRequirement(
        name = "registry_auth",
        scopes = { "write:utmsps", "read:utmsps" }
      )
    }
  )
  @RequestMapping(
    method = RequestMethod.GET,
    value = "/utmsp/{utmspId}",
    produces = { "application/json" }
  )
  default ResponseEntity<Utmsp> getUtmspById(
    @Parameter(
      name = "utmspId",
      description = "ID of utmsp to return",
      required = true,
      in = ParameterIn.PATH
    ) @PathVariable("utmspId") UUID utmspId
  ) {
    // getRequest()
    //   .ifPresent(
    //     request -> {
    //       for (MediaType mediaType : MediaType.parseMediaTypes(
    //         request.getHeader("Accept")
    //       )) {
    //         if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
    //           String exampleString =
    //             "{ \"oemSerialNumber\" : \"oemSerialNumber\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"type\" : { \"photoUrl\" : \"https://openapi-generator.tech\", \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"modelNumber\" : \"modelNumber\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"mtow\" : 6.0274563, \"utmsp\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"validity\" : { \"till\" : \"2000-01-23T04:56:07.000+00:00\", \"from\" : \"2000-01-23T04:56:07.000+00:00\" }, \"utmsp\" : { \"timestamps\" : { \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"updated\" : \"2000-01-23T04:56:07.000+00:00\" }, \"name\" : \"name\", \"cin\" : \"cin\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"regdAddress\" : { \"city\" : \"Mumbai\", \"pinCode\" : 172074.45705867198, \"line3\" : \"Bandra West\", \"line2\" : \"Landmark\", \"line1\" : \"123 ABC Housing Society\" }, \"gstin\" : \"gstin\" } }, \"supportedOperationCategories\" : [ null, null ] } }";
    //           ApiUtil.setExampleResponse(request, "application/json", exampleString);
    //           break;
    //         }
    //       }
    //     }
    //   );
    Dao.Utmsp le = Dao.Utmsp.get(
      DaoInstance.getInstance().getSession(),
      utmspId
    );
    return ResponseEntity.ok(in.ispirt.pushpaka.registry.models.Utmsp.toOa(le));
  }

  /**
   * PUT /utmsp/{utmspId} : Updates a utmsp in the store with form data
   *
   *
   * @param utmspId ID of utmsp that needs to be updated (required)
   * @param name Name of utmsp that needs to be updated (optional)
   * @param status Status of utmsp that needs to be updated (optional)
   * @return Invalid input (status code 405)
   */
  @Operation(
    operationId = "updateUtmsp",
    summary = "Updates a utmsp in the store",
    description = "",
    tags = { "utmsp" },
    responses = { @ApiResponse(responseCode = "405", description = "Invalid input") },
    security = {
      @SecurityRequirement(
        name = "registry_auth",
        scopes = { "write:utmsps", "read:utmsps" }
      )
    }
  )
  @RequestMapping(method = RequestMethod.PUT, value = "/utmsp/{utmspId}")
  default ResponseEntity<Utmsp> updateUtmsp(
    @Parameter(
      name = "utmspId",
      description = "ID of utmsp that needs to be updated",
      required = true,
      in = ParameterIn.PATH
    ) @PathVariable("utmspId") UUID utmspId,
    @Parameter(
      name = "Utmsp",
      description = "Create a new utmsp in the store",
      required = true
    ) @Valid @RequestBody Utmsp utmsp
  ) {
    Dao.Utmsp le = Dao.Utmsp.update(
      DaoInstance.getInstance().getSession(),
      utmspId,
      Utmsp.fromOa(utmsp)
    );
    return ResponseEntity.ok(in.ispirt.pushpaka.registry.models.Utmsp.toOa(le));
    // return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
