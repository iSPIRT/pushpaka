openapi: 3.0.2
info:
  contact:
    email: sayandeep@ispirt.in
  description: |-
    This is a sample UasType Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the uasType store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The UasType Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the UasType Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Pushpaka Registry
  version: 1.0.17
externalDocs:
  description: Find out more about Pushpaka
  url: https://ispirt.github.io/pushpaka/
servers:
- url: /api/v1
tags:
- description: UAS Types
  name: uas_type
- description: Operations about user
  name: user
paths:
  /uasType:
    post:
      description: Add a new uasType to the store
      operationId: addUasType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UasType'
          application/xml:
            schema:
              $ref: '#/components/schemas/UasType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UasType'
        description: Create a new uasType in the store
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UasType'
            application/json:
              schema:
                $ref: '#/components/schemas/UasType'
          description: Successful operation
        "405":
          description: Invalid input
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: Add a new uasType to the store
      tags:
      - uas_types
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: uas_types
    put:
      description: Update an existing uasType by Id
      operationId: updateUasType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UasType'
          application/xml:
            schema:
              $ref: '#/components/schemas/UasType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UasType'
        description: Update an existent uasType in the store
        required: true
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UasType'
            application/json:
              schema:
                $ref: '#/components/schemas/UasType'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: UasType not found
        "405":
          description: Validation exception
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: Update an existing uasType
      tags:
      - uas_types
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: uas_types
  /uasType/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findUasTypesByStatus
      parameters:
      - description: Status values that need to be considered for filter
        explode: true
        in: query
        name: status
        required: false
        schema:
          default: available
          enum:
          - available
          - pending
          - sold
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/UasType'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UasType'
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: Finds UasTypes by status
      tags:
      - uas_types
      x-accepts: application/json
      x-tags:
      - tag: uas_types
  /uasType/findByTags:
    get:
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findUasTypesByTags
      parameters:
      - description: Tags to filter by
        explode: true
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/UasType'
                type: array
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UasType'
                type: array
          description: successful operation
        "400":
          description: Invalid tag value
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: Finds UasTypes by tags
      tags:
      - uas_types
      x-accepts: application/json
      x-tags:
      - tag: uas_types
  /uasType/{uasTypeId}:
    delete:
      description: ""
      operationId: deleteUasType
      parameters:
      - description: ""
        explode: false
        in: header
        name: api_key
        required: false
        schema:
          type: string
        style: simple
      - description: UasType id to delete
        explode: false
        in: path
        name: uasTypeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid uasType value
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: Deletes a uasType
      tags:
      - uas_types
      x-accepts: application/json
      x-tags:
      - tag: uas_types
    get:
      description: Returns a single uasType
      operationId: getUasTypeById
      parameters:
      - description: ID of uasType to return
        explode: false
        in: path
        name: uasTypeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/UasType'
            application/json:
              schema:
                $ref: '#/components/schemas/UasType'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: UasType not found
      security:
      - api_key: []
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: Find uasType by ID
      tags:
      - uas_types
      x-accepts: application/json
      x-tags:
      - tag: uas_types
    post:
      description: ""
      operationId: updateUasTypeWithForm
      parameters:
      - description: ID of uasType that needs to be updated
        explode: false
        in: path
        name: uasTypeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Name of uasType that needs to be updated
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Status of uasType that needs to be updated
        explode: true
        in: query
        name: status
        required: false
        schema:
          type: string
        style: form
      responses:
        "405":
          description: Invalid input
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: Updates a uasType in the store with form data
      tags:
      - uas_types
      x-accepts: application/json
      x-tags:
      - tag: uas_types
  /uasType/{uasTypeId}/uploadImage:
    post:
      description: ""
      operationId: uploadFile
      parameters:
      - description: ID of uasType to update
        explode: false
        in: path
        name: uasTypeId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Additional Metadata
        explode: true
        in: query
        name: additionalMetadata
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      security:
      - registry_auth:
        - write:uasTypes
        - read:uasTypes
      summary: uploads an image
      tags:
      - uas_types
      x-content-type: application/octet-stream
      x-accepts: application/json
      x-tags:
      - tag: uas_types
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      security:
      - api_key: []
      summary: Returns uasType inventories by status
      tags:
      - store
      x-accepts: application/json
      x-tags:
      - tag: store
  /store/order:
    post:
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "405":
          description: Invalid input
      summary: Place an order for a uasType
      tags:
      - store
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: store
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - description: ID of the order that needs to be deleted
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete purchase order by ID
      tags:
      - store
      x-accepts: application/json
      x-tags:
      - tag: store
    get:
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrderById
      parameters:
      - description: ID of order that needs to be fetched
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Find purchase order by ID
      tags:
      - store
      x-accepts: application/json
      x-tags:
      - tag: store
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      summary: Create user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/createWithList:
    post:
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/User'
              type: array
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/login:
    get:
      description: ""
      operationId: loginUser
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/logout:
    get:
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    get:
      description: ""
      operationId: getUserByName
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: name that need to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Update an existent user in the store
      responses:
        default:
          description: successful operation
      summary: Update user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
  schemas:
    Order:
      example:
        quantity: 7
        uasTypeId: 198772
        id: 10
        shipDate: 2000-01-23T04:56:07.000+00:00
        complete: true
        status: approved
      properties:
        id:
          example: 10
          format: int64
          type: integer
        uasTypeId:
          example: 198772
          format: int64
          type: integer
        quantity:
          example: 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          example: approved
          type: string
        complete:
          type: boolean
      type: object
      xml:
        name: order
    Customer:
      properties:
        id:
          example: 100000
          format: int64
          type: integer
        username:
          example: fehguy
          type: string
        address:
          items:
            $ref: '#/components/schemas/Address'
          type: array
          xml:
            name: addresses
            wrapped: true
      type: object
      xml:
        name: customer
    Category:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Dogs
          type: string
      type: object
      xml:
        name: category
    User:
      example:
        firstName: John
        lastName: James
        userStatus: 1
        phone: "12345"
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        email: john@email.com
        username: theUser
      properties:
        id:
          format: uuid
          type: string
        username:
          example: theUser
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: James
          type: string
        email:
          example: john@email.com
          type: string
        phone:
          example: "12345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
      required:
      - email
      - firstName
      - id
      - lastName
      - username
      type: object
    Tag:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: tag
    UasType:
      example:
        mass: 6.027456183070403
        modelNumber: modelNumber
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        propulsionCategory: null
        manufacturer:
          validTill: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          validFrom: 2000-01-23T04:56:07.000+00:00
          legalEntity:
            name: name
            cin: cin
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            regdAddress:
              city: Mumbai
              pinCode: 172074.45705867198
              state: null
              line3: Bandra West
              line2: Landmark
              line1: 123 ABC Housing Society
            gstin: gstin
      properties:
        id:
          format: uuid
          type: string
        modelNumber:
          type: string
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
        propulsionCategory:
          $ref: '#/components/schemas/UasPropulsionCategory'
        mass:
          description: maximum take off mass in grams
          format: integer
          type: number
      required:
      - id
      - manufacturer
      - mass
      - modelNumber
      - propulsionCategory
      type: object
    ApiResponse:
      example:
        code: 0
        type: type
        message: message
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      type: object
      xml:
        name: '##default'
    UasWeightCategory:
      enum:
      - NANO
      - SMALL
      - MICRO
      - MEDIUM
      - LARGE
      type: string
    UasPropulsionCategory:
      enum:
      - VTOL
      - FIXED_WING
      - HYBRID
      type: string
    State:
      enum:
      - ANDHRA_PRADESH
      - ARUNACHAL_PRADESH
      - ASSAM
      - BIHAR
      - CHHATTISGARH
      - GOA
      - GUJARAT
      - HARYANA
      - HIMACHAL_PRADESH
      - JHARKHAND
      - KARNATAKA
      - KERALA
      - MADHYA_PRADESH
      - MAHARASHTRA
      - MANIPUR
      - MEGHALAYA
      - MIZORAM
      - NAGALAND
      - ODISHA
      - PUNJAB
      - RAJASTHAN
      - SIKKIM
      - TAMIL_NADU
      - TELANGANA
      - TRIPURA
      - UTTARAKHAND
      - UTTAR_PRADESH
      - WEST_BENGAL
      - ANDAMAN_AND_NICOBAR_ISLANDS
      - CHANDIGARH
      - DADRA_NAGAR_HAVELI_DAMAN_DIU
      - NCT
      - JAMMU_KASHMIR
      - LADAKH
      - LAKSHADWEEP
      - PUDUCHERRY
      type: string
    Address:
      example:
        city: Mumbai
        pinCode: 172074.45705867198
        state: null
        line3: Bandra West
        line2: Landmark
        line1: 123 ABC Housing Society
      properties:
        line1:
          example: 123 ABC Housing Society
          type: string
        line2:
          example: Landmark
          type: string
        line3:
          example: Bandra West
          type: string
        city:
          example: Mumbai
          type: string
        state:
          $ref: '#/components/schemas/State'
        pinCode:
          maximum: 999999
          minimum: 100000
          type: number
      required:
      - city
      - line1
      - line2
      - line3
      - pinCode
      - state
      type: object
    LegalEntity:
      example:
        name: name
        cin: cin
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        regdAddress:
          city: Mumbai
          pinCode: 172074.45705867198
          state: null
          line3: Bandra West
          line2: Landmark
          line1: 123 ABC Housing Society
        gstin: gstin
      properties:
        id:
          format: uuid
          type: string
        cin:
          type: string
        name:
          type: string
        regdAddress:
          $ref: '#/components/schemas/Address'
        gstin:
          type: string
      required:
      - cin
      - id
      - name
      - regdAddress
      type: object
    Manufacturer:
      example:
        validTill: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        validFrom: 2000-01-23T04:56:07.000+00:00
        legalEntity:
          name: name
          cin: cin
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          regdAddress:
            city: Mumbai
            pinCode: 172074.45705867198
            state: null
            line3: Bandra West
            line2: Landmark
            line1: 123 ABC Housing Society
          gstin: gstin
      properties:
        id:
          format: uuid
          type: string
        legalEntity:
          $ref: '#/components/schemas/LegalEntity'
        validFrom:
          format: date-time
          type: string
        validTill:
          format: date-time
          type: string
      required:
      - id
      - legalEntity
      type: object
    Operator:
      properties:
        id:
          format: uuid
          type: string
        legalEntity:
          $ref: '#/components/schemas/LegalEntity'
        validFrom:
          format: date-time
          type: string
        validTill:
          format: date-time
          type: string
      required:
      - id
      - legalEntity
      type: object
  securitySchemes:
    registry_auth:
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:uasTypes: modify uasTypes in your account
            read:uasTypes: read your uasTypes
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
